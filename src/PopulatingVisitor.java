//
// Generated by JTB 1.3.2 DIT@UoA patched
//

import syntaxtree.*;
import visitor.GJDepthFirst;
import java.util.*;

import SymbolTable.*;
import SymbolTable.Class;


public class PopulatingVisitor extends GJDepthFirst<String,String> {

   SymbolTable st;

   public PopulatingVisitor(SymbolTable st) 
   {
		this.st = st;
	}

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   @Override
   public String visit(MainClass n, String argu) throws Exception 
   {
        String class_name = n.f1.accept(this, argu);
        
        st.add_class(class_name, null);

        Class _class = st.get_class(class_name);
        _class.add_function("main", "void");

        String arg_name = n.f11.accept(this, argu);

        Function main = _class.get_function("main");
        main.add_argument(arg_name, "String[]");

        n.f14.accept(this, class_name + st.class_delimiter + "main");
      
      
      return null;
   }

   /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    @Override
    public String visit(ClassDeclaration n, String argu) throws Exception 
    {
        String class_name = n.f1.accept(this, argu);

        st.add_class(class_name, null);

        n.f3.accept(this, class_name);
        n.f4.accept(this, class_name);

        return null;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    @Override
    public String visit(ClassExtendsDeclaration n, String argu) throws Exception 
    {
        String class_name = n.f1.accept(this, argu);
        String super_name = n.f3.accept(this, argu);

        st.add_class(class_name, super_name);

        n.f5.accept(this, class_name);
        n.f6.accept(this, class_name);

        return null;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    @Override
    public String visit(MethodDeclaration n, String argu) throws Exception 
    {
        String type = n.f1.accept(this, argu);
        String name = n.f2.accept(this, argu);

        Class _class = st.get_class(argu);
        _class.add_function(name, type, st.get_function(_class.superclass(), name) != null);

        Function fun = _class.get_function(name);

        if (n.f4.present())
        {
            String argumentList = n.f4.accept(this, argu);
            for (String arg : argumentList.split(","))
            {
                String[] terms = arg.split(" ");
                fun.add_argument(terms[1], terms[0]);
            }
        }
        
        n.f7.accept(this, argu + st.class_delimiter + name);

        return null;
    }

    /**
         * f0 -> FormalParameter()
         * f1 -> FormalParameterTail()
    */
    @Override
    public String visit(FormalParameterList n, String argu) throws Exception
    {
        String ret = n.f0.accept(this, argu);

        if (n.f1 != null) 
            ret += n.f1.accept(this, argu);

        return ret;
    }

    /**
        * f0 -> ","
        * f1 -> FormalParameter()
    */
    @Override
    public String visit(FormalParameterTerm n, String argu) throws Exception
    {
        return n.f1.accept(this, argu);
    }

    /**
        * f0 -> ( FormalParameterTerm() )*
    */
    @Override
    public String visit(FormalParameterTail n, String argu) throws Exception 
    {
        String ret = "";

        for (Node node : n.f0.nodes) 
            ret += "," + node.accept(this, argu);

        return ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    @Override
    public String visit(FormalParameter n, String argu) throws Exception
    {
        String type = n.f0.accept(this, argu);
        String name = n.f1.accept(this, argu);
        return type + " " + name;
    }

    /**
        * f0 -> "boolean"
        * f1 -> "["
        * f2 -> "]"
    */
    @Override
    public String visit(BooleanArrayType n, String argu) throws Exception 
    {
        return "boolean[]";
    }

    /**
        * f0 -> "int"
        * f1 -> "["
        * f2 -> "]"
    */
    @Override
    public String visit(IntegerArrayType n, String argu) throws Exception 
    {
        return "int[]";
    }

    @Override
    public String visit(BooleanType n, String argu) 
    {
        return "boolean";
    }

    @Override
    public String visit(IntegerType n, String argu) 
    {
        return "int";
    }

    @Override
    public String visit(Identifier n, String argu) 
    {
        return n.f0.toString();
    }

    /**
        * f0 -> Type()
        * f1 -> Identifier()
        * f2 -> ";"
    */
    @Override
	public String visit(VarDeclaration n, String argu) throws Exception 
    {
		String type = n.f0.accept(this, argu);
		String name = n.f1.accept(this, argu);

        // names[0] class name -> Should always have value
        // names[1] method_name 
		String[] names = argu.split(st.class_delimiter);

        Class _class = st.get_class(names[0]);
        
        if (names.length == 1)
            _class.add_variable(name, type);
        else
            (_class.get_function(names[1])).add_variable(name, type);

		return null;
	}

}
